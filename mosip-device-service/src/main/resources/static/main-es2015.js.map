{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/discover-devices/discover-devices.component.ts","./src/app/components/discover-devices/discover-devices.component.html","./src/app/components/footer/footer.component.ts","./src/app/components/footer/footer.component.html","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/app/components/main-nav/main-nav.component.ts","./src/app/components/main-nav/main-nav.component.html","./src/app/components/new-test/new-test.component.ts","./src/app/components/new-test/new-test.component.html","./src/app/components/run/run.component.ts","./src/app/components/run/run.component.html","./src/app/components/test-runs/test-runs.component.ts","./src/app/components/test-runs/test-runs.component.html","./src/app/dto/compose-request.ts","./src/app/material/material.module.ts","./src/app/services/data/data.service.ts","./src/app/services/local-storage/local-storage.service.ts","./src/app/services/mds/mds.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {AppComponent} from './app.component';\r\nimport {NewTestComponent} from './components/new-test/new-test.component';\r\nimport {TestRunsComponent} from './components/test-runs/test-runs.component';\r\nimport {DiscoverDevicesComponent} from './components/discover-devices/discover-devices.component';\r\nimport {RunComponent} from './components/run/run.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'test-runs',\r\n    pathMatch: 'full',\r\n  },\r\n  {path: 'new-test', component: NewTestComponent},\r\n  {path: 'test-runs', component: TestRunsComponent},\r\n  {path: 'run', component: RunComponent},\r\n  {path: 'discover-devices', component: DiscoverDevicesComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n}\r\n","<app-main-nav>\r\n  <router-outlet></router-outlet>\r\n  <app-footer></app-footer>\r\n</app-main-nav>\r\n\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport {MaterialModule} from './material/material.module';\r\nimport {BrowserAnimationsModule, NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport { NewTestComponent } from './components/new-test/new-test.component';\r\nimport { MainNavComponent } from './components/main-nav/main-nav.component';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { TestRunsComponent } from './components/test-runs/test-runs.component';\r\nimport { DiscoverDevicesComponent } from './components/discover-devices/discover-devices.component';\r\nimport { RunComponent } from './components/run/run.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\n\r\nimport { MatVideoModule } from 'mat-video';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NewTestComponent,\r\n    MainNavComponent,\r\n    TestRunsComponent,\r\n    DiscoverDevicesComponent,\r\n    RunComponent,\r\n    HeaderComponent,\r\n    FooterComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    MaterialModule,\r\n    NoopAnimationsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatVideoModule\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {MdsService} from '../../services/mds/mds.service';\r\nimport {DataService} from '../../services/data/data.service';\r\nimport {LocalStorageService} from '../../services/local-storage/local-storage.service';\r\nimport {MatSelectChange} from '@angular/material/select';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-discover-devices',\r\n  templateUrl: './discover-devices.component.html',\r\n  styleUrls: ['./discover-devices.component.css']\r\n})\r\nexport class DiscoverDevicesComponent implements OnInit {\r\n  discoveryResponse: any;\r\n  infoResponse: any;\r\n  availablePorts: string[];\r\n  devices = [];\r\n  scanning: boolean;\r\n  mdshost: string;\r\n\r\n  constructor(\r\n    private mdsService: MdsService,\r\n    private dataService: DataService,\r\n    private localStorageService: LocalStorageService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.scanning = false;\r\n    this.availablePorts = this.localStorageService.getAvailablePorts();\r\n    this.mdshost = '';\r\n  }\r\n\r\n  discover(port: string) {\r\n    this.mdsService.discover(this.mdshost, port).subscribe(\r\n      response => this.discoveryResponse = response,\r\n      error => window.alert(error)\r\n    );\r\n  }\r\n\r\n  getInfo(port: string) {\r\n    this.mdsService.getInfo(this.mdshost, port).subscribe(\r\n      response => {\r\n        this.infoResponse = response;\r\n        this.dataService.decodeDeviceInfo(response).subscribe(\r\n          decodedDeviceInfo => this.localStorageService.addDeviceInfos(port, decodedDeviceInfo),\r\n          error => window.alert(error)\r\n        );\r\n      },\r\n      error => window.alert(error)\r\n    );\r\n  }\r\n\r\n  OnPortSelect(port) {\r\n    this.devices = this.localStorageService.getDevicesByPortNumber(port);\r\n  }\r\n\r\n  scan(host) {\r\n\r\n    if(host === '') {\r\n      window.alert(\"Please enter MDS host\")\r\n    }\r\n\r\n    this.mdshost = host;\r\n    this.scanning = true;\r\n    this.mdsService.scan(this.mdshost).subscribe(\r\n      value => {},\r\n      error => {},\r\n      () => {\r\n        this.scanning = false;\r\n        this.availablePorts = this.localStorageService.getAvailablePorts();\r\n        this.openSnackBar('Scan Complete', 'Close');\r\n      }\r\n    );\r\n  }\r\n\r\n  openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n}\r\n","<!--<mat-form-field class=\"example-full-width\">-->\r\n<!--  <mat-label>Port Number</mat-label>-->\r\n<!--  <input #port matInput placeholder=\"4200\" type=\"number\">-->\r\n<!--</mat-form-field>-->\r\n<!--<button mat-stroked-button color=\"primary\" (click)=\"discover(port.value)\">Discover</button>-->\r\n<!--<button mat-stroked-button color=\"primary\" (click)=\"getInfo(port.value)\">Get Info</button>-->\r\n  \r\n\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width invisible\">\r\n    <mat-label>MDS Host URL</mat-label>\r\n    <input #host matInput placeholder=\"http://127.0.0.1\" value=\"http://127.0.0.1\">\r\n  </mat-form-field>\r\n\r\n<br/>\r\n\r\n  \t<button mat-stroked-button color=\"primary\" (click)=\"scan(host.value)\">Scan\r\n\t<mat-icon *ngIf=\"scanning\"><mat-spinner color=\"accent\" diameter=\"20\">\r\n \t</mat-spinner></mat-icon></button>\r\n</form>\r\n\r\n<br/>\r\n\r\n\r\n<!--<pre>{{discoveryResponse | json}}</pre>-->\r\n<!--<pre>{{infoResponse | json}}</pre>-->\r\n\r\n<mat-form-field appearance=\"fill\">\r\n  <mat-label>Available Ports</mat-label>\r\n  <mat-select (selectionChange)='OnPortSelect($event.value)'>\r\n    <mat-option *ngFor=\"let port of availablePorts\" [value]=\"port\">\r\n      {{port}}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n<br/>\r\n\r\n<mat-accordion *ngIf=\"devices.length\">\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-description>Output</mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-tab-group dynamicHeight>\r\n      <mat-tab>\r\n        <pre>{{devices | json}}</pre>      \r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<!-- <div *ngIf=\"devices.length\">\r\n  <pre>{{devices | json}}</pre>\r\n</div> -->\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<!-- Footer -->\r\n<footer class=\"footer\">\r\n\r\n  <div class=\"footer-copyright\">\r\n    <div class=\"container\">\r\n    \tPowered By Mosip\r\n    </div>\r\n  </div>\r\n\r\n</footer>\r\n<!-- Footer -->","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar is-light\">\r\n\r\n<!-- logo -->\r\n<div class=\"navbar-brand\">\r\n  <a class=\"navbar-item\" href=\"https://mosip.io\">\r\n    <img src=\"assets/logo-final.png\">\r\n\t</a>\r\n\r\n\t<mat-toolbar>\r\n\t  <span> MDS TESTING KIT </span>\r\n\t</mat-toolbar>\r\n\r\n</div>\r\n</nav>","import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-main-nav',\r\n  templateUrl: './main-nav.component.html',\r\n  styleUrls: ['./main-nav.component.css']\r\n})\r\nexport class MainNavComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) {}\r\n\r\n}\r\n","<!-- <mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #drawer class=\"sidenav\" \r\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\r\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\r\n      [opened]=\"(isHandset$ | async) === false\">\r\n    <mat-nav-list>\r\n      <a mat-list-item routerLink=\"discover-devices\">Discover Devices</a>\r\n      <a mat-list-item routerLink=\"new-test\">Create Test Run</a>\r\n      <a mat-list-item routerLink=\"test-runs\">Test Runs</a>      \r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <mat-toolbar color=\"primary\">\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Toggle sidenav\"\r\n        mat-icon-button\r\n        (click)=\"drawer.toggle()\"\r\n        *ngIf=\"isHandset$ | async\">\r\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n      </button>\r\n    </mat-toolbar> \r\n   \r\n    <ng-content></ng-content>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container> -->\r\n\r\n\r\n<mat-sidenav-container fullscreen>\r\n  <mat-sidenav #sidenav [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\r\n      [opened]=\"(isHandset$ | async) === false\" class=\"sidenav\" >\r\n\r\n    <app-header></app-header>\r\n\r\n    <mat-nav-list>   \r\n\r\n      <a mat-list-item [routerLink]=\"'/discover-devices'\" style=\"color: white;\" routerLinkActive=\"list-item-active\"> Discover Devices </a>\r\n      <mat-divider></mat-divider>\r\n      <a mat-list-item [routerLink]=\"'/new-test'\" style=\"color: white;\" routerLinkActive=\"list-item-active\"> Create Test Run </a>\r\n      <mat-divider></mat-divider>\r\n      <a mat-list-item [routerLink]=\"'/test-runs'\" style=\"color: white;\" routerLinkActive=\"list-item-active\"> Test Runs </a>\r\n      <mat-divider></mat-divider>\r\n\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n   <mat-toolbar color=\"primary\">\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n\r\n      <span></span>\r\n\r\n    </mat-toolbar>\r\n\r\n    <div style=\"padding: 1%;\"><router-outlet></router-outlet></div>\r\n      \r\n\r\n  </mat-sidenav-content> \r\n\r\n</mat-sidenav-container>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../../services/data/data.service';\r\nimport { map } from 'rxjs/operators';\r\nimport {Router} from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-new-test',\r\n  templateUrl: './new-test.component.html',\r\n  styleUrls: ['./new-test.component.css']\r\n})\r\nexport class NewTestComponent implements OnInit {\r\n  title = 'mds-test-ui';\r\n  tests: any;\r\n  masterData: any;\r\n  deviceTypes: [];\r\n  selectedTests = [];\r\n  selectedBiometricType: any;\r\n  selectedDeviceType: any;\r\n  selectedMdsVersion: any;\r\n  selectedProcess: any;\r\n  email = '';\r\n  runName = '';\r\n\r\n  constructor(private dataService: DataService, private router: Router) {\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.masterData = this.dataService.getMasterData().subscribe(\r\n      masterData => this.masterData = masterData,\r\n      error => window.alert(error)\r\n    );\r\n\r\n  }\r\n\r\n  OnBiometricSelect(event) {\r\n    this.deviceTypes = event.value.deviceSubTypes;\r\n  }\r\n\r\n  OnGetTestsClicked() {\r\n    const requestBody = {\r\n      biometricType: this.selectedBiometricType.type,\r\n      deviceSubType: this.selectedDeviceType,\r\n      mdsSpecificationVersion: this.selectedMdsVersion,\r\n      process: this.selectedProcess\r\n    };\r\n    // console.log(requestBody);\r\n    this.dataService.getTests(requestBody)\r\n      .subscribe(\r\n          tests => this.tests = tests,\r\n        error => window.alert(error)\r\n      );\r\n  }\r\n\r\n  OnCreateRunClicked() {\r\n    const requestBody = {\r\n      biometricType: this.selectedBiometricType.type,\r\n      deviceSubType: this.selectedDeviceType,\r\n      mdsSpecVersion: this.selectedMdsVersion,\r\n      process: this.selectedProcess,\r\n      tests: this.selectedTests,\r\n      email: this.email,\r\n      runName: this.runName\r\n    };\r\n    console.log(requestBody);\r\n    this.dataService.createRun(requestBody)\r\n      .pipe(\r\n        map((body: any) => {\r\n          return body.runId;\r\n        })\r\n      )\r\n      .subscribe(\r\n          runId => {\r\n            window.alert('created. Run ID: ' + runId);\r\n            this.router.navigate(['/']);\r\n          },\r\n          error => window.alert(error)\r\n      );\r\n  }\r\n}\r\n","<mat-horizontal-stepper>\r\n  <mat-step label=\"Select run configration\" state=\"phone\">\r\n\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Process</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedProcess\">\r\n        <mat-option class=\"option\" *ngFor=\"let obj of masterData.process;\" [value]=\"obj \">{{obj}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field><br/>\r\n\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Biometric type</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedBiometricType\" (selectionChange)='OnBiometricSelect($event)' name=\"sel2\">\r\n        <mat-option *ngFor=\"let obj of masterData.biometricType;\" [value]=\"obj \">{{obj.type}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br/>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Device type</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedDeviceType\">\r\n        <mat-option *ngFor=\"let obj of deviceTypes;\" [value]=\"obj\">{{obj}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <br/>\r\n\r\n     <mat-form-field appearance=\"fill\">\r\n      <mat-label>MDS version</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedMdsVersion\">\r\n        <mat-option class=\"option\" *ngFor=\"let obj of masterData.mdsSpecificationVersion;\" [value]=\"obj \">{{obj}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <br/>\r\n\r\n    <br/>\r\n    <button mat-raised-button matStepperNext\r\n            (click)=\"OnGetTestsClicked()\">\r\n      Get Tests\r\n    </button>\r\n  </mat-step>\r\n  <mat-step label=\"Select tests\" state=\"chat\">\r\n    <mat-selection-list #test_list [(ngModel)]=\"selectedTests\">\r\n      <mat-list-option *ngFor=\"let test of tests\" [value]=\"test.testId\">\r\n        {{test.testId}}\r\n      </mat-list-option>\r\n    </mat-selection-list>\r\n    <div>\r\n      <button mat-button matStepperPrevious>Back</button>\r\n      <button mat-button matStepperNext>Next</button>\r\n    </div>\r\n  </mat-step>\r\n  <mat-step label=\"description\">\r\n    <mat-form-field class=\"example-full-width\" *ngIf=\"selectedTests.length\">\r\n    <mat-label>Email</mat-label>\r\n    <input [(ngModel)]=\"email\" matInput placeholder=\"abc@gmail.com\">\r\n  </mat-form-field>\r\n    <br/>\r\n    <mat-form-field class=\"example-full-width\" *ngIf=\"selectedTests.length\">\r\n      <mat-label>Run Name/Description</mat-label>\r\n      <input [(ngModel)]=\"runName\" matInput placeholder=\"For fingerprint device\">\r\n    </mat-form-field>\r\n    <br/>\r\n    <button mat-raised-button (click)=\"OnCreateRunClicked()\" *ngIf=\"selectedTests.length\">\r\n      Create Run\r\n    </button>\r\n  </mat-step>\r\n</mat-horizontal-stepper>\r\n\r\n","import {Component, OnInit, ViewChild, ElementRef} from '@angular/core';\r\nimport {LocalStorageService} from '../../services/local-storage/local-storage.service';\r\nimport {ComposeRequest} from '../../dto/compose-request';\r\nimport {DataService} from '../../services/data/data.service';\r\nimport {MdsService} from '../../services/mds/mds.service';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport * as jwt_decode from 'jwt-decode';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ndeclare const start_streaming: any;\r\ndeclare const stop_streaming: any;\r\n\r\n@Component({\r\n  selector: 'app-run',\r\n  templateUrl: './run.component.html',\r\n  styleUrls: ['./run.component.css']\r\n})\r\nexport class RunComponent implements OnInit {\r\n  run;\r\n  tests = [];\r\n  selectedDevice: any;\r\n  devices = [];\r\n  availablePorts: any;\r\n  currentPort: any;\r\n  requests = [];\r\n  objectKeys = Object.keys;\r\n  testReportObject: any;\r\n  panelOpenState: boolean;\r\n  JSON: any;\r\n  Object: any;\r\n  mdmInitiated = false;\r\n  streamingInitiated = false;\r\n  currentTestId: string;\r\n\r\n  constructor(\r\n    private localStorageService: LocalStorageService,\r\n    private dataService: DataService,\r\n    private mdsService: MdsService,\r\n    private _sanitizer: DomSanitizer\r\n  ) {\r\n    this.JSON = JSON;\r\n    this.Object = Object;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(history.state.data);\r\n    this.run = history.state.data;\r\n    this.availablePorts = this.localStorageService.getAvailablePorts();\r\n    //this.fetchReport();\r\n    this.panelOpenState = false;\r\n  }\r\n\r\n  fetchReport() {\r\n   this.dataService.getTestReport(this.run.runId).subscribe(\r\n      body => {\r\n        this.testReportObject = body;\r\n        console.log(body);\r\n      },\r\n      error => window.alert(error)\r\n    );\r\n  }\r\n\r\n  isComplete(row: any) {\r\n    if (this.run.testReport) {\r\n      if (this.run.testReport.hasOwnProperty(row)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onRunClicked() {\r\n      const composeRequest = new ComposeRequest();\r\n      const deviceDto = {\r\n        port: this.currentPort,\r\n        deviceInfo: this.selectedDevice\r\n      };\r\n\r\n      this.dataService.composeAllRequests(this.run.runId, deviceDto).subscribe(\r\n        body => {\r\n          this.requests = [];\r\n          this.testReportObject = body;\r\n          console.log(body);\r\n        },\r\n        error => window.alert(error)\r\n      );\r\n      console.log(\"Finished capturing MDS requests\");\r\n  }\r\n\r\n\r\n  getMDSResponse(request, runId, testId) {\r\n      let mdmResponse = this.testReportObject.testReport[testId].responseData;\r\n      if(this.mdmInitiated === true) {\r\n       console.log(\"MDM request is currently going on .....\");\r\n      }\r\n      else {\r\n        let self = this;\r\n        console.log(\"Initiating request to Device >>>> \" + testId);\r\n        this.requests.push(testId);\r\n        this.mdmInitiated = true;\r\n        this.stopStreaming(testId);\r\n        this.mdsService.request(JSON.parse(request)).subscribe(\r\n                response => {\r\n                  this.validateMDSResponse(runId, testId, request, response);\r\n                },\r\n                error => { this.validateMDSResponse(runId, testId, request, error); }\r\n              );\r\n              console.log(\"Finished capturing MDS Responses >>>>> \" + testId);\r\n              this.mdmInitiated = false;\r\n      }\r\n    }\r\n\r\n    validateMDSResponse(runId, testId, request, response) {\r\n          this.dataService.validateResponse(runId, testId, request, response).subscribe(\r\n                      result => {\r\n                        this.testReportObject = result;\r\n                        console.log('result:' + result);\r\n                      },\r\n                      error => window.alert(error)\r\n                    );\r\n    }\r\n\r\n    getStreamImgTagId(testId) {\r\n      let id = testId.split(' ').join('-');\r\n      return id;\r\n    }\r\n\r\n    /* startStreaming(testId) {\r\n       let element = document.getElementById(this.getStreamImgTagId(testId));\r\n       if(element) {\r\n         (<HTMLImageElement>element).setAttribute(\"src\", this.getStreamUrl(testId));\r\n       }\r\n    }\r\n\r\n    stopStreaming(testId) {\r\n      let element = document.getElementById(this.getStreamImgTagId(testId));\r\n      if(element) {\r\n        (<HTMLImageElement>element).setAttribute(\"src\", \"\");\r\n      }\r\n    } */\r\n\r\n    /* startStreaming(testId) {\r\n       console.log(\"startStreaming invoked.... >>> \" + testId);\r\n        var self = this;\r\n        var element = document.getElementById(\"test-id\");\r\n        if(element) {\r\n          var mediaSource = new MediaSource();\r\n          var url = URL.createObjectURL(myMediaSource);\r\n          mediaSource.addEventListener('sourceopen', this.sourceOpen);\r\n\r\n          self.mdsService.startMDSStream('http://127.0.0.1:4501/stream?deviceId=1&devideSubId=1');\r\n\r\n          console.log(\"after startMDSStream>>>>>>>>>>.\");\r\n\r\n          myMediaSource.addEventListener('sourceopen', function () {\r\n                console.log(myMediaSource.readyState);\r\n                var sourceBuffer = myMediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.64001e\"');\r\n                console.log(myMediaSource.readyState);\r\n\r\n                self.mdsService.messages.subscribe(msg => {\r\n                      console.log(\"i got a message\");\r\n                      sourceBuffer.appendBuffer(msg);\r\n                    });\r\n           });\r\n        }\r\n    }\r\n\r\n    sourceOpen() {\r\n        console.log(\"source open received\");\r\n        var mediaSource = this;\r\n        var sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\r\n    }\r\n\r\n\r\n    uint8ToBase64(buffer) {\r\n         var binary = '';\r\n         var len = buffer.byteLength;\r\n         for (var i = 0; i < len; i++) {\r\n             binary += String.fromCharCode(buffer[i]);\r\n         }\r\n         var result = window.btoa( binary );\r\n         console.log(\"window.btoa result >>>>>>>>>>>>>>>>>>\");\r\n         return result;\r\n    }\r\n\r\n    stopStreaming(testId) {\r\n      this.mdsStream = \"\";\r\n      let element = document.getElementById(this.getStreamImgTagId(testId));\r\n      if(element) {\r\n        (<HTMLVideoElement>element).setAttribute(\"src\", \"\");\r\n      }\r\n    } */\r\n\r\n\r\n  getStreamUrl(testId) {\r\n    return this.testReportObject.testReport[testId].streamUrl;\r\n  }\r\n\r\n  isStreamRequired(testId) {\r\n     return this.testReportObject.testReport[testId].streamUrl ? true : false;\r\n  }\r\n\r\n  /* isMDSResponseCaptured(testId) {\r\n      let mdmCaptured = false;\r\n      for(let i=0; i<this.requests.length;i++) {\r\n        if(this.requests[i] === testId) {\r\n          mdmCaptured = true;\r\n        }\r\n      }\r\n      return mdmCaptured;\r\n  } */\r\n\r\n  /* getMDSResponse(request, runId, testId) {\r\n      this.mdsService.request(request.requestInfoDto).subscribe(\r\n          response => {\r\n            console.log(response);\r\n            this.dataService.validateResponse(runId, testId, request, response).subscribe(\r\n              result => {console.log('result:' + result);\r\n                         this.fetchReport();\r\n              },\r\n              error => window.alert(error)\r\n            );\r\n          },\r\n        error => window.alert(error)\r\n      );\r\n    } */\r\n\r\n  /* requestMds(request, runId, testId) {\r\n    this.mdsService.request(request.requestInfoDto).subscribe(\r\n        response => {\r\n          console.log(response);\r\n          this.dataService.validateResponse(runId, testId, request, response).subscribe(\r\n            result => {console.log('result:' + result);\r\n                       this.fetchReport();\r\n            },\r\n            error => window.alert(error)\r\n          );\r\n        },\r\n      error => window.alert(error)\r\n    );\r\n  } */\r\n\r\n  getButtonName(request) {\r\n     let method = JSON.parse(request).verb;\r\n     switch(method.toUpperCase()) {\r\n      case \"MOSIPDISC\":\r\n        return \"Discover Devices\";\r\n      case \"MOSIPDINFO\":\r\n        return \"Get Device Info\";\r\n      case \"CAPTURE\":\r\n        return \"Initiate Capture\";\r\n      case \"RCAPTURE\":\r\n        return \"Initiate RCapture\";\r\n     }\r\n     return \"Initiate Request\";\r\n  }\r\n\r\n  OnPortSelect(value: any) {\r\n    this.currentPort = value;\r\n    this.devices = this.localStorageService.getDevicesByPortNumber(value);\r\n  }\r\n\r\n  getPassedValidators(value: any) {\r\n    if(value !== undefined) {\r\n      let total = 0;\r\n      for (let i = 0; i<value.length; i++) {\r\n        if(value[i].status == 'Passed')\r\n          total = total + 1;\r\n      }\r\n      return total + ' out of ' + value.length + ' validations Passed';\r\n    }\r\n    return '0 out of 0 Passed';\r\n  }\r\n\r\n    getSanitizedSafeURLResource(data) {\r\n      return this._sanitizer.bypassSecurityTrustHtml(data);\r\n    }\r\n\r\n    startStreaming(testId) {\r\n      let url = this.getStreamUrl(testId);\r\n      var parts = url.split(\"?\");\r\n      var args = parts[1].split(\"&\");\r\n      start_streaming(parts[0], args[0].replace(\"deviceId=\", \"\"), args[1].replace(\"deviceSubId=\", \"\"),\r\n      this.getStreamImgTagId(testId))\r\n    }\r\n\r\n    stopStreaming(testId) {\r\n      stop_streaming();\r\n    }\r\n}\r\n","<div *ngIf=\"!testReportObject || Object.keys(testReportObject.testReport).length === 0\" style=\"padding: 1%;\">\r\n  <app-discover-devices></app-discover-devices>\r\n\r\n  <br/>\r\n\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Available Ports</mat-label>\r\n    <mat-select (selectionChange)='OnPortSelect($event.value)'>\r\n      <mat-option *ngFor=\"let port of availablePorts\" [value]=\"port\">\r\n        {{port}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Device</mat-label>\r\n    <mat-select [(ngModel)]=\"selectedDevice\">\r\n      <mat-option *ngFor=\"let obj of devices;\" [value]=\"obj\">{{obj.purpose + obj.deviceId}}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <button mat-raised-button\r\n          (click)=\"onRunClicked()\">\r\n    RUN\r\n  </button>\r\n</div>\r\n<br/>\r\n\r\n\r\n<!--Form Ends-->\r\n<div style=\"padding: 1%;\">\r\n<mat-accordion *ngIf=\"testReportObject\">\r\n  <mat-expansion-panel *ngFor=\"let key of objectKeys(testReportObject.testReport)\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        {{key}}\r\n      </mat-panel-title>\r\n      <mat-panel-description>\r\n        {{testReportObject.testReport[key].currentState}}\r\n       <!-- {{ getPassedValidators(testReportObject.testReport[key].validationResults) }}-->\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-tab-group dynamicHeight>\r\n      <mat-tab label=\"Description\">\r\n        <p *ngIf=\"testReportObject.testReport[key].summary\">\r\n         <b>Summary</b> : {{testReportObject.testReport[key].summary}}\r\n        </p>\r\n        <br/>\r\n        <p><b>ExecutedOn</b> : {{testReportObject.testReport[key].executedOn | date: 'full'}}</p>\r\n      </mat-tab>\r\n\r\n      <mat-tab label=\"Request\">\r\n\r\n          <div class=\"centereddiv\" *ngIf=\"isStreamRequired(key)\">\r\n            <!--<img #stream [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" alt=\"stream video feed\"\r\n                 style=\"background-color: #000000;\" border=\"1\">-->\r\n            <!--<mat-video [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" ></mat-video>-->\r\n            <!--<img #stream [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" alt=\"stream video feed\"\r\n                 style=\"background-color: #000000;\" border=\"1\" >-->\r\n            <!--<video #stream id=\"test-id\" width=\"200\" height=\"200\" ></video>-->\r\n           <!-- <img [id]=\"getStreamImgTagId(key)\" [src]=\"imageToShow\"\r\n                 alt=\"STREAMING ...\"\r\n                 *ngIf=\"!isImageLoading; else noImageFound\">\r\n            <ng-template #noImageFound>\r\n              <img src=\"fallbackImage.png\" alt=\"Fallbackimage\">\r\n            </ng-template>-->\r\n            <img #stream [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" alt=\"Start Streaming to Display\" border=\"1\">\r\n          </div>\r\n\r\n          <div class=\"centereddiv\" >\r\n\r\n            <button *ngIf=\"isStreamRequired(key)\" mat-raised-button (click)=\"startStreaming(key)\">Start Streaming</button>\r\n\r\n            <button mat-raised-button (click)=\"getMDSResponse(testReportObject.testReport[key].requestData,\r\n            testReportObject.testReport[key].runId, key)\">{{getButtonName(testReportObject.testReport[key].requestData)}}</button>\r\n          </div>\r\n\r\n        <pre>{{JSON.parse(testReportObject.testReport[key].requestData) | json}}</pre>\r\n\r\n      </mat-tab>\r\n      <mat-tab label=\"Response\">\r\n           <pre>{{JSON.parse(testReportObject.testReport[key].responseData) | json}}</pre>\r\n      </mat-tab>\r\n      <mat-tab label=\"Validation Result\">\r\n        <mat-accordion>\r\n          <mat-expansion-panel *ngFor=\"let result of testReportObject.testReport[key].validationResults\">\r\n            <mat-expansion-panel-header>\r\n              <mat-panel-title>\r\n                <span *ngIf=\"result.status == 'Passed'\" class=\"material-icons\" style=\"margin-right: 24px;color: green;\">done</span>\r\n                <span *ngIf=\"result.status == 'Failed' || result.status == 'InternalException'\" class=\"material-icons\" style=\"margin-right: 24px;color: red;\">highlight_off</span>\r\n                <span *ngIf=\"result.status == 'Pending'\" class=\"material-icons\" style=\"margin-right: 24px;color: yellow;\">hourglass_full</span>\r\n                {{result.validationName}}\r\n              </mat-panel-title>\r\n              <mat-panel-description>\r\n                {{result.validationDescription}}\r\n              </mat-panel-description>\r\n            </mat-expansion-panel-header>\r\n            <pre *ngIf=\"result.errors\">{{ result.errors | json}}</pre>\r\n          </mat-expansion-panel>\r\n        </mat-accordion>\r\n      </mat-tab>\r\n      <mat-tab label=\"Result\">\r\n        <div [innerHTML]=\"getSanitizedSafeURLResource(testReportObject.testReport[key].renderContent)\"></div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n</div>\r\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {DataService} from '../../services/data/data.service';\r\nimport {MdsService} from '../../services/mds/mds.service';\r\n\r\n@Component({\r\n  selector: 'app-test-runs',\r\n  templateUrl: './test-runs.component.html',\r\n  styleUrls: ['./test-runs.component.css']\r\n})\r\nexport class TestRunsComponent implements OnInit {\r\n  displayedColumns: string[] = ['runId', 'runName', 'runStatus', 'createdOn'];\r\n  dataSource: any;\r\n\r\n  @ViewChild(MatPaginator, {static: false}) paginator:MatPaginator;\r\n  \r\n  @ViewChild(MatSort, {static: false}) sort: MatSort;\r\n  \r\n  constructor(private dataService: DataService) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  applyFilter(value: string) {\r\n    this.dataSource.filter = value.trim().toLocaleLowerCase();\r\n  }\r\n\r\n  getRuns(email: string) {\r\n    this.dataService.getRuns(email).subscribe(\r\n      response => {\r\n        this.dataSource = new MatTableDataSource();\r\n        this.dataSource.data = response;\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n        localStorage.setItem('runs', JSON.stringify(response));\r\n      },\r\n      error => window.alert(error)\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <mat-label>E-mail</mat-label>\r\n    <input #email matInput placeholder=\"abc@example.com\">\r\n  </mat-form-field>\r\n\r\n  <button mat-raised-button (click)=\"getRuns(email.value)\">Get Runs</button>\r\n</form>\r\n\r\n<!--Table Starts-->\r\n<div class=\"table\">\r\n  <mat-form-field >\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event.target.value)\">\r\n  </mat-form-field>\r\n\r\n  <div class=\"mat-elevation-z8\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort>\r\n\r\n      <!-- ID Column -->\r\n      <ng-container matColumnDef=\"runId\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Run ID </th>\r\n        <td mat-cell *matCellDef=\"let row\"> <a [routerLink]=\"['/run']\" [state]=\"{data: row}\">{{row.runId}}</a> </td>\r\n      </ng-container>\r\n      <!-- Progress Column -->\r\n      <ng-container matColumnDef=\"runName\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Run Name </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.runName}} </td>\r\n      </ng-container>\r\n\r\n      <!-- Progress Column -->\r\n      <ng-container matColumnDef=\"runStatus\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Run Status </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.runStatus}} </td>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"createdOn\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Created On </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.createdOn | date: 'full'}} </td><!--use 'long' to remove day-->\r\n      </ng-container>\r\n\r\n      <!-- Color Column -->\r\n      <!--    <ng-container matColumnDef=\"color\">-->\r\n      <!--      <th mat-header-cell *matHeaderCellDef mat-sort-header> Color </th>-->\r\n      <!--      <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\"> {{row.color}} </td>-->\r\n      <!--    </ng-container>-->\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n      </tr>\r\n    </table>\r\n\r\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" ></mat-paginator>\r\n  </div>\r\n</div>\r\n","export class ComposeRequest {\r\n  runId: string;\r\n  testId: string;\r\n  deviceInfo: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport { MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatOptionModule} from '@angular/material/core';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport { MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatProgressBarModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatCheckboxModule,\r\n    DragDropModule,\r\n    MatSlideToggleModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatSidenavModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule,\r\n    MatTabsModule,\r\n    MatExpansionModule,\r\n    MatStepperModule\r\n  ],\r\n  exports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatProgressBarModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatCheckboxModule,\r\n    DragDropModule,\r\n    MatSlideToggleModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatSidenavModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule,\r\n    MatTabsModule,\r\n    MatExpansionModule,\r\n    MatStepperModule\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getMasterData() {\r\n    return this.httpClient.get(environment.base_url + 'testmanager/masterdata')\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  getTestReport(runId) {\r\n    return this.httpClient.get(environment.base_url + 'testmanager/report/' +runId+ '/json')\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  getTests(requestBody) {\r\n    return this.httpClient.post(environment.base_url + 'testmanager/test', requestBody)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createRun(requestBody) {\r\n    return this.httpClient.post(environment.base_url + 'testmanager/createrun', requestBody)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getRuns(email) {\r\n    return this.httpClient.get(environment.base_url + 'testmanager/runs/' + email)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  decodeDeviceInfo(deviceInfoResponse: any) {\r\n    return this.httpClient.post(environment.base_url + 'testrunner/decodedeviceinfo', deviceInfoResponse)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n\r\n      console.error('An error occurred >>> ', JSON.stringify(error));\r\n\r\n      if(error.status === 0 || error.status === 404)\r\n        return throwError('Not Connected to Server');\r\n\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(error.error.message);\r\n  }\r\n\r\n  composeRequest(runId: string, test: string, deviceDto: { port: any; deviceInfo: any }) {\r\n    return this.httpClient.post(environment.base_url + 'testrunner/composerequest', {\r\n      runId,\r\n      testId: test,\r\n      uiInputs: [],\r\n      deviceInfo: deviceDto\r\n\r\n    })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  composeAllRequests(runId: string, deviceDto: { port: any; deviceInfo: any }) {\r\n      return this.httpClient.post(environment.base_url + 'testrunner/getallrequests', {\r\n        runId,\r\n        deviceInfo: deviceDto\r\n      })\r\n        .pipe(\r\n          catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n  validateResponse(runId: any, testId: string, request: any, response: any) {\r\n    return this.httpClient.post(environment.base_url + 'testrunner/validateresponse', {\r\n      runId,\r\n      testId,\r\n      mdsResponse: JSON.stringify(response),\r\n      mdsRequest: JSON.stringify(request),\r\n      resultVerbosity: ''\r\n\r\n    })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() { }\r\n\r\n  addDeviceInfos(port: string, decodedDeviceInfo: any) {\r\n      console.log(decodedDeviceInfo);\r\n      // const devices = {\r\n      //   port: port,\r\n      //   devices: decodedDeviceInfo\r\n      // };\r\n      // const devices = {};\r\n      // devices[port] = decodedDeviceInfo;\r\n      let deviceInfo = {};\r\n      if (!localStorage.getItem('deviceInfo')) {\r\n        localStorage.setItem('deviceInfo', JSON.stringify(deviceInfo));\r\n      }\r\n      deviceInfo = JSON.parse(localStorage.getItem('deviceInfo'));\r\n      deviceInfo[port] = decodedDeviceInfo;\r\n      localStorage.setItem('deviceInfo', JSON.stringify(deviceInfo));\r\n  }\r\n\r\n  addDeviceDiscover(port: string, deviceDiscover: any) {\r\n    console.log(deviceDiscover);\r\n    // const devices = {\r\n    //   port: port,\r\n    //   devices: decodedDeviceInfo\r\n    // };\r\n    // const devices = {};\r\n    // devices[port] = decodedDeviceInfo;\r\n    let discover = {};\r\n    //if (!localStorage.getItem('discover')) {\r\n      localStorage.setItem('discover', JSON.stringify(discover));\r\n    //}\r\n    discover = JSON.parse(localStorage.getItem('discover'));\r\n    discover[port] = deviceDiscover;\r\n    localStorage.setItem('discover', JSON.stringify(discover));\r\n  }\r\n  // using device info\r\n  // getAvailablePorts() {\r\n  //   if (!localStorage.getItem('deviceInfo')) {\r\n  //     return [];\r\n  //   }\r\n  //   const ports = Object.keys(JSON.parse(localStorage.getItem('deviceInfo')));\r\n  //   // console.log(ports);\r\n  //   return ports;\r\n  // }\r\n\r\n  getAvailablePorts() {\r\n    if (!localStorage.getItem('discover')) {\r\n      return [];\r\n    }\r\n    const ports = Object.keys(JSON.parse(localStorage.getItem('discover')));\r\n    // console.log(ports);\r\n    return ports;\r\n  }\r\n// using device info\r\n  // getDevicesByPortNumber(port: string) {\r\n  //   if (!localStorage.getItem('deviceInfo')) {\r\n  //     return [];\r\n  //   }\r\n  //   return JSON.parse(localStorage.getItem('deviceInfo'))[port];\r\n  // }\r\n\r\n\r\n  getDevicesByPortNumber(port: string) {\r\n    if (!localStorage.getItem('discover')) {\r\n      return [];\r\n    }\r\n    return JSON.parse(localStorage.getItem('discover'))[port];\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Observable, of, throwError, Subject} from 'rxjs';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {environment} from '../../../environments/environment';\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {DataService} from '../data/data.service';\r\nimport {LocalStorageService} from '../local-storage/local-storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MdsService {\r\n\r\n  private mdsHost: string\r\n  private mdsUrl: string;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private dataService: DataService,\r\n    private localStorageService: LocalStorageService\r\n  ) { }\r\n\r\n  discover(host:string, port: string) {\r\n    this.mdsHost = host;\r\n    this.mdsUrl = this.mdsHost + ':' + port + '/device';\r\n    return this.httpClient.request('MOSIPDISC', this.mdsUrl, {\r\n      body: {\r\n        type: 'Biometric Device'\r\n      }\r\n    }).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getInfo(host:string, port: string) {\r\n    this.mdsUrl = this.mdsHost + ':' + port + '/info';\r\n    return this.httpClient.request('MOSIPDINFO', this.mdsUrl)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      // console.error(\r\n      //   `Backend returned code ${error.status}, ` +\r\n      //   `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(\r\n      'Something bad happened; please try again later.');\r\n  }\r\n\r\n  scanWithInfo() {\r\n    // const ports = [];\r\n    return new Observable(\r\n      subscriber => {\r\n        for (let i = 4501; i <= 4600; i++) {\r\n          this.getInfo(this.mdsHost, i.toString()).subscribe(\r\n            value => {\r\n              this.dataService.decodeDeviceInfo(value).subscribe(\r\n                decodedDeviceInfo => this.localStorageService.addDeviceInfos(i.toString(), decodedDeviceInfo),\r\n                error => window.alert(error)\r\n              );\r\n            }\r\n          );\r\n        }\r\n        subscriber.complete();\r\n        return {unsubscribe() {}};\r\n      }\r\n    );\r\n  }\r\n\r\n  scan(host:string) {\r\n    // const ports = [];\r\n    return new Observable(\r\n      subscriber => {\r\n        for (let i = 4501; i <= 4600; i++) {\r\n          // if (i == 4501) {\r\n            this.discover(host, i.toString()).subscribe(\r\n              value => {\r\n                console.log('run' + value);\r\n                this.localStorageService.addDeviceDiscover(i.toString(), value);\r\n              }\r\n            );\r\n          // }\r\n        }\r\n        subscriber.complete();\r\n        return {unsubscribe() {}};\r\n      }\r\n    );\r\n  }\r\n\r\n  request(requestInfoDto: any) {\r\n    return this.httpClient.request(requestInfoDto.verb, requestInfoDto.url, {body: requestInfoDto.body});\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  base_url: 'http://localhost:8080/',\r\n  mds_url: 'http://127.0.0.1:'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}