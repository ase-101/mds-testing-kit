{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/discover-devices/discover-devices.component.ts","webpack:///src/app/components/discover-devices/discover-devices.component.html","webpack:///src/app/components/footer/footer.component.ts","webpack:///src/app/components/footer/footer.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/main-nav/main-nav.component.ts","webpack:///src/app/components/main-nav/main-nav.component.html","webpack:///src/app/components/new-test/new-test.component.ts","webpack:///src/app/components/new-test/new-test.component.html","webpack:///src/app/components/run/run.component.ts","webpack:///src/app/components/run/run.component.html","webpack:///src/app/components/test-runs/test-runs.component.ts","webpack:///src/app/components/test-runs/test-runs.component.html","webpack:///src/app/dto/compose-request.ts","webpack:///src/app/material/material.module.ts","webpack:///src/app/modal/modal.component.ts","webpack:///src/app/modal/modal.component.html","webpack:///src/app/services/data/data.service.ts","webpack:///src/app/services/local-storage/local-storage.service.ts","webpack:///src/app/services/mds/mds.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DiscoverDevicesComponent","mdsService","dataService","localStorageService","snackBar","dialog","devices","scanning","availablePorts","getAvailablePorts","mdshost","port","discover","subscribe","response","discoveryResponse","error","openDialog","getInfo","infoResponse","decodeDeviceInfo","decodedDeviceInfo","addDeviceInfos","getDevicesByPortNumber","host","window","alert","scan","value","length","message","action","open","duration","title","width","data","OnPortSelect","FooterComponent","HeaderComponent","MainNavComponent","breakpointObserver","isHandset$","observe","Handset","pipe","result","matches","NewTestComponent","router","selectedTests","email","runName","masterData","getMasterData","event","deviceTypes","deviceSubTypes","requestBody","biometricType","selectedBiometricType","type","deviceSubType","selectedDeviceType","mdsSpecificationVersion","selectedMdsVersion","process","selectedProcess","getTests","tests","mdsSpecVersion","console","log","createRun","body","runId","navigate","OnBiometricSelect","OnGetTestsClicked","RunComponent","_sanitizer","requests","objectKeys","Object","mdmInitiated","streamingInitiated","loading","authloading","JSON","history","state","run","panelOpenState","getTestReport","testReportObject","row","testReport","hasOwnProperty","composeRequest","deviceDto","currentPort","deviceInfo","selectedDevice","composeAllRequests","request","testId","mdmResponse","responseData","self","push","stopStreaming","parse","validateMDSResponse","validateResponse","split","join","streamUrl","method","verb","toUpperCase","undefined","total","i","status","bypassSecurityTrustHtml","url","getStreamUrl","parts","args","start_streaming","replace","getStreamImgTagId","stop_streaming","enableAuthTest","authTestCall","stringify","TestRunsComponent","displayedColumns","dataSource","filter","trim","toLocaleLowerCase","getRuns","paginator","sort","localStorage","setItem","applyFilter","ComposeRequest","MaterialModule","ModalComponent","dialogRef","close","DataService","httpClient","get","base_url","handleError","post","deviceInfoResponse","ErrorEvent","test","uiInputs","mdsResponse","mdsRequest","resultVerbosity","providedIn","LocalStorageService","getItem","deviceDiscover","ports","MdsService","mdsHost","mdsUrl","subscriber","toString","complete","unsubscribe","addDeviceDiscover","requestInfoDto","environment","production","mds_url","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {AppComponent} from './app.component';\r\nimport {NewTestComponent} from './components/new-test/new-test.component';\r\nimport {TestRunsComponent} from './components/test-runs/test-runs.component';\r\nimport {DiscoverDevicesComponent} from './components/discover-devices/discover-devices.component';\r\nimport {RunComponent} from './components/run/run.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'test-runs',\r\n    pathMatch: 'full',\r\n  },\r\n  {path: 'new-test', component: NewTestComponent},\r\n  {path: 'test-runs', component: TestRunsComponent},\r\n  {path: 'run', component: RunComponent},\r\n  {path: 'discover-devices', component: DiscoverDevicesComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\n\r\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\r\n\r\ninterface DialogData {\r\n  message: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n}\r\n","<app-main-nav>\r\n  <router-outlet></router-outlet>\r\n  <app-footer></app-footer>\r\n</app-main-nav>\r\n\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport {MaterialModule} from './material/material.module';\r\nimport {BrowserAnimationsModule, NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport { NewTestComponent } from './components/new-test/new-test.component';\r\nimport { MainNavComponent } from './components/main-nav/main-nav.component';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { TestRunsComponent } from './components/test-runs/test-runs.component';\r\nimport { DiscoverDevicesComponent } from './components/discover-devices/discover-devices.component';\r\nimport { RunComponent } from './components/run/run.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\n\r\nimport { MatVideoModule } from 'mat-video';\r\nimport { ModalComponent } from './modal/modal.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NewTestComponent,\r\n    MainNavComponent,\r\n    TestRunsComponent,\r\n    DiscoverDevicesComponent,\r\n    RunComponent,\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    ModalComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    MaterialModule,\r\n    NoopAnimationsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatVideoModule\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {MdsService} from '../../services/mds/mds.service';\r\nimport {DataService} from '../../services/data/data.service';\r\nimport {LocalStorageService} from '../../services/local-storage/local-storage.service';\r\nimport {MatSelectChange} from '@angular/material/select';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ModalComponent } from '../../modal/modal.component';\r\n\r\n@Component({\r\n  selector: 'app-discover-devices',\r\n  templateUrl: './discover-devices.component.html',\r\n  styleUrls: ['./discover-devices.component.css']\r\n})\r\nexport class DiscoverDevicesComponent implements OnInit {\r\n  discoveryResponse: any;\r\n  infoResponse: any;\r\n  availablePorts: string[];\r\n  devices = [];\r\n  scanning: boolean;\r\n  mdshost: string;\r\n\r\n  constructor(\r\n    private mdsService: MdsService,\r\n    private dataService: DataService,\r\n    private localStorageService: LocalStorageService,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.scanning = false;\r\n    this.availablePorts = this.localStorageService.getAvailablePorts();\r\n    this.mdshost = '';\r\n  }\r\n\r\n  discover(port: string) {\r\n    this.mdsService.discover(this.mdshost, port).subscribe(\r\n      response => this.discoveryResponse = response,\r\n      error => this.openDialog(\"Alert\", error)\r\n    );\r\n  }\r\n\r\n  getInfo(port: string) {\r\n    this.mdsService.getInfo(this.mdshost, port).subscribe(\r\n      response => {\r\n        this.infoResponse = response;\r\n        this.dataService.decodeDeviceInfo(response).subscribe(\r\n          decodedDeviceInfo => this.localStorageService.addDeviceInfos(port, decodedDeviceInfo),\r\n          error => this.openDialog(\"Alert\", error)\r\n        );\r\n      },\r\n      error => this.openDialog(\"Alert\", error)\r\n    );\r\n  }\r\n\r\n  OnPortSelect(port) {\r\n    this.devices = this.localStorageService.getDevicesByPortNumber(port);\r\n  }\r\n\r\n  scan(host) {\r\n\r\n    if(host === '') {\r\n      window.alert(\"Please enter MDS host\")\r\n    }\r\n\r\n    this.mdshost = host;\r\n    this.scanning = true;\r\n    this.mdsService.scan(this.mdshost).subscribe(\r\n      value => {},\r\n      error => {},\r\n      () => {\r\n        this.scanning = false;\r\n        this.availablePorts = this.localStorageService.getAvailablePorts();\r\n        if(this.availablePorts && !this.availablePorts.length)\r\n          this.openDialog(\"Alert\", \"Scan Complete, No devices discovered.\");\r\n        else\r\n          this.openDialog(\"Message\", \"Scan Complete\");\r\n      }\r\n    );\r\n  }\r\n\r\n  openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n\r\n  openDialog(title: string, message: string): void {\r\n          this.dialog.open(ModalComponent, {\r\n            width: '40%',\r\n            data: {'title': title, 'message' : message }\r\n          });\r\n      }\r\n\r\n}\r\n","<!--<mat-form-field class=\"example-full-width\">-->\r\n<!--  <mat-label>Port Number</mat-label>-->\r\n<!--  <input #port matInput placeholder=\"4200\" type=\"number\">-->\r\n<!--</mat-form-field>-->\r\n<!--<button mat-stroked-button color=\"primary\" (click)=\"discover(port.value)\">Discover</button>-->\r\n<!--<button mat-stroked-button color=\"primary\" (click)=\"getInfo(port.value)\">Get Info</button>-->\r\n  \r\n\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width invisible\">\r\n    <mat-label>MDS Host URL</mat-label>\r\n    <input #host matInput placeholder=\"http://127.0.0.1\" value=\"http://127.0.0.1\">\r\n  </mat-form-field>\r\n\r\n<br/>\r\n\r\n  \t<button mat-stroked-button color=\"primary\" (click)=\"scan(host.value)\">Scan\r\n\t<mat-icon *ngIf=\"scanning\"><mat-spinner color=\"accent\" diameter=\"20\">\r\n \t</mat-spinner></mat-icon></button>\r\n</form>\r\n\r\n<br/>\r\n\r\n\r\n<!--<pre>{{discoveryResponse | json}}</pre>-->\r\n<!--<pre>{{infoResponse | json}}</pre>-->\r\n\r\n<mat-form-field appearance=\"fill\">\r\n  <mat-label>Available Ports</mat-label>\r\n  <mat-select (selectionChange)='OnPortSelect($event.value)'>\r\n    <mat-option *ngFor=\"let port of availablePorts\" [value]=\"port\">\r\n      {{port}}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n<br/>\r\n\r\n<mat-accordion *ngIf=\"devices.length\">\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-description>Output</mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-tab-group dynamicHeight>\r\n      <mat-tab>\r\n        <pre>{{devices | json}}</pre>      \r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<!-- <div *ngIf=\"devices.length\">\r\n  <pre>{{devices | json}}</pre>\r\n</div> -->\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<!-- Footer -->\r\n<footer class=\"footer\">\r\n\r\n  <div class=\"footer-copyright\">\r\n    <div class=\"container\">\r\n    \tPowered By Mosip\r\n    </div>\r\n  </div>\r\n\r\n</footer>\r\n<!-- Footer -->","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar is-light\">\r\n\r\n<!-- logo -->\r\n<div class=\"navbar-brand\">\r\n  <a class=\"navbar-item\" href=\"https://mosip.io\">\r\n    <img src=\"assets/logo-final.png\">\r\n\t</a>\r\n\r\n\t<mat-toolbar>\r\n\t  <span> MDS TESTING KIT </span>\r\n\t</mat-toolbar>\r\n\r\n</div>\r\n</nav>","import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-main-nav',\r\n  templateUrl: './main-nav.component.html',\r\n  styleUrls: ['./main-nav.component.css']\r\n})\r\nexport class MainNavComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) {}\r\n\r\n}\r\n","<!-- <mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #drawer class=\"sidenav\" \r\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\r\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\r\n      [opened]=\"(isHandset$ | async) === false\">\r\n    <mat-nav-list>\r\n      <a mat-list-item routerLink=\"discover-devices\">Discover Devices</a>\r\n      <a mat-list-item routerLink=\"new-test\">Create Test Run</a>\r\n      <a mat-list-item routerLink=\"test-runs\">Test Runs</a>      \r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <mat-toolbar color=\"primary\">\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Toggle sidenav\"\r\n        mat-icon-button\r\n        (click)=\"drawer.toggle()\"\r\n        *ngIf=\"isHandset$ | async\">\r\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n      </button>\r\n    </mat-toolbar> \r\n   \r\n    <ng-content></ng-content>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container> -->\r\n\r\n\r\n<mat-sidenav-container fullscreen>\r\n  <mat-sidenav #sidenav [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\r\n      [opened]=\"(isHandset$ | async) === false\" class=\"sidenav\" >\r\n\r\n    <app-header></app-header>\r\n\r\n    <mat-nav-list>   \r\n\r\n      <a mat-list-item [routerLink]=\"'/discover-devices'\" style=\"color: white;\" routerLinkActive=\"list-item-active\"> Discover Devices </a>\r\n      <mat-divider></mat-divider>\r\n      <a mat-list-item [routerLink]=\"'/new-test'\" style=\"color: white;\" routerLinkActive=\"list-item-active\"> Create Test Run </a>\r\n      <mat-divider></mat-divider>\r\n      <a mat-list-item [routerLink]=\"'/test-runs'\" style=\"color: white;\" routerLinkActive=\"list-item-active\"> Test Runs </a>\r\n      <mat-divider></mat-divider>\r\n\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n   <mat-toolbar color=\"primary\">\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n\r\n      <span></span>\r\n\r\n    </mat-toolbar>\r\n\r\n    <div style=\"padding: 1%;\"><router-outlet></router-outlet></div>\r\n      \r\n\r\n  </mat-sidenav-content> \r\n\r\n</mat-sidenav-container>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../../services/data/data.service';\r\nimport { map } from 'rxjs/operators';\r\nimport {Router} from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-new-test',\r\n  templateUrl: './new-test.component.html',\r\n  styleUrls: ['./new-test.component.css']\r\n})\r\nexport class NewTestComponent implements OnInit {\r\n  title = 'mds-test-ui';\r\n  tests: any;\r\n  masterData: any;\r\n  deviceTypes: [];\r\n  selectedTests = [];\r\n  selectedBiometricType: any;\r\n  selectedDeviceType: any;\r\n  selectedMdsVersion: any;\r\n  selectedProcess: any;\r\n  email = '';\r\n  runName = '';\r\n\r\n  constructor(private dataService: DataService, private router: Router) {\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.masterData = this.dataService.getMasterData().subscribe(\r\n      masterData => this.masterData = masterData,\r\n      error => window.alert(error)\r\n    );\r\n\r\n  }\r\n\r\n  OnBiometricSelect(event) {\r\n    this.deviceTypes = event.value.deviceSubTypes;\r\n  }\r\n\r\n  OnGetTestsClicked() {\r\n    const requestBody = {\r\n      biometricType: this.selectedBiometricType.type,\r\n      deviceSubType: this.selectedDeviceType,\r\n      mdsSpecificationVersion: this.selectedMdsVersion,\r\n      process: this.selectedProcess\r\n    };\r\n    // console.log(requestBody);\r\n    this.dataService.getTests(requestBody)\r\n      .subscribe(\r\n          tests => this.tests = tests,\r\n        error => window.alert(error)\r\n      );\r\n  }\r\n\r\n  OnCreateRunClicked() {\r\n    const requestBody = {\r\n      biometricType: this.selectedBiometricType.type,\r\n      deviceSubType: this.selectedDeviceType,\r\n      mdsSpecVersion: this.selectedMdsVersion,\r\n      process: this.selectedProcess,\r\n      tests: this.selectedTests,\r\n      email: this.email,\r\n      runName: this.runName\r\n    };\r\n    console.log(requestBody);\r\n    this.dataService.createRun(requestBody)\r\n      .pipe(\r\n        map((body: any) => {\r\n          return body.runId;\r\n        })\r\n      )\r\n      .subscribe(\r\n          runId => {\r\n            window.alert('created. Run ID: ' + runId);\r\n            this.router.navigate(['/']);\r\n          },\r\n          error => window.alert(error)\r\n      );\r\n  }\r\n}\r\n","<mat-horizontal-stepper>\r\n  <mat-step label=\"Select run configration\" state=\"phone\">\r\n\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Process</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedProcess\">\r\n        <mat-option class=\"option\" *ngFor=\"let obj of masterData.process;\" [value]=\"obj \">{{obj}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field><br/>\r\n\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Biometric type</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedBiometricType\" (selectionChange)='OnBiometricSelect($event)' name=\"sel2\">\r\n        <mat-option *ngFor=\"let obj of masterData.biometricType;\" [value]=\"obj \">{{obj.type}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br/>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Device type</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedDeviceType\">\r\n        <mat-option *ngFor=\"let obj of deviceTypes;\" [value]=\"obj\">{{obj}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <br/>\r\n\r\n     <mat-form-field appearance=\"fill\">\r\n      <mat-label>MDS version</mat-label>\r\n      <mat-select [(ngModel)]=\"selectedMdsVersion\">\r\n        <mat-option class=\"option\" *ngFor=\"let obj of masterData.mdsSpecificationVersion;\" [value]=\"obj \">{{obj}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <br/>\r\n\r\n    <br/>\r\n    <button mat-raised-button matStepperNext\r\n            (click)=\"OnGetTestsClicked()\">\r\n      Get Tests\r\n    </button>\r\n  </mat-step>\r\n  <mat-step label=\"Select tests\" state=\"chat\">\r\n    <mat-selection-list #test_list [(ngModel)]=\"selectedTests\">\r\n      <mat-list-option *ngFor=\"let test of tests\" [value]=\"test.testId\">\r\n        {{test.testId}}\r\n      </mat-list-option>\r\n    </mat-selection-list>\r\n    <div>\r\n      <button mat-button matStepperPrevious>Back</button>\r\n      <button mat-button matStepperNext>Next</button>\r\n    </div>\r\n  </mat-step>\r\n  <mat-step label=\"description\">\r\n    <mat-form-field class=\"example-full-width\" *ngIf=\"selectedTests.length\">\r\n    <mat-label>Email</mat-label>\r\n    <input [(ngModel)]=\"email\" matInput placeholder=\"abc@gmail.com\">\r\n  </mat-form-field>\r\n    <br/>\r\n    <mat-form-field class=\"example-full-width\" *ngIf=\"selectedTests.length\">\r\n      <mat-label>Run Name/Description</mat-label>\r\n      <input [(ngModel)]=\"runName\" matInput placeholder=\"For fingerprint device\">\r\n    </mat-form-field>\r\n    <br/>\r\n    <button mat-raised-button (click)=\"OnCreateRunClicked()\" *ngIf=\"selectedTests.length\">\r\n      Create Run\r\n    </button>\r\n  </mat-step>\r\n</mat-horizontal-stepper>\r\n\r\n","import {Component, OnInit, ViewChild, ElementRef} from '@angular/core';\r\nimport {LocalStorageService} from '../../services/local-storage/local-storage.service';\r\nimport {ComposeRequest} from '../../dto/compose-request';\r\nimport {DataService} from '../../services/data/data.service';\r\nimport {MdsService} from '../../services/mds/mds.service';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport * as jwt_decode from 'jwt-decode';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ModalComponent } from '../../modal/modal.component';\r\n\r\ndeclare const start_streaming: any;\r\ndeclare const stop_streaming: any;\r\n\r\n@Component({\r\n  selector: 'app-run',\r\n  templateUrl: './run.component.html',\r\n  styleUrls: ['./run.component.css']\r\n})\r\nexport class RunComponent implements OnInit {\r\n  run;\r\n  tests = [];\r\n  selectedDevice: any;\r\n  devices = [];\r\n  availablePorts: any;\r\n  currentPort: any;\r\n  requests = [];\r\n  objectKeys = Object.keys;\r\n  testReportObject: any;\r\n  panelOpenState: boolean;\r\n  JSON: any;\r\n  Object: any;\r\n  mdmInitiated = false;\r\n  streamingInitiated = false;\r\n  currentTestId: string;\r\n  loading = false;\r\n  authloading = false;\r\n\r\n  constructor(\r\n    private localStorageService: LocalStorageService,\r\n    private dataService: DataService,\r\n    private mdsService: MdsService,\r\n    private _sanitizer: DomSanitizer,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.JSON = JSON;\r\n    this.Object = Object;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(history.state.data);\r\n    this.run = history.state.data;\r\n    this.availablePorts = this.localStorageService.getAvailablePorts();\r\n    //this.fetchReport();\r\n    this.panelOpenState = false;\r\n  }\r\n\r\n  fetchReport() {\r\n   this.dataService.getTestReport(this.run.runId).subscribe(\r\n      body => {\r\n        this.testReportObject = body;\r\n        console.log(body);\r\n      },\r\n      error => this.openDialog(\"Alert\", error)\r\n    );\r\n  }\r\n\r\n  isComplete(row: any) {\r\n    if (this.run.testReport) {\r\n      if (this.run.testReport.hasOwnProperty(row)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onRunClicked() {\r\n      const composeRequest = new ComposeRequest();\r\n      const deviceDto = {\r\n        port: this.currentPort,\r\n        deviceInfo: this.selectedDevice\r\n      };\r\n\r\n      this.dataService.composeAllRequests(this.run.runId, deviceDto).subscribe(\r\n        body => {\r\n          this.requests = [];\r\n          this.testReportObject = body;\r\n          console.log(body);\r\n        },\r\n        error => this.openDialog(\"Alert\", error)\r\n      );\r\n      console.log(\"Finished capturing MDS requests\");\r\n  }\r\n\r\n\r\n  getMDSResponse(request, runId, testId) {\r\n      this.loading = true;\r\n      let mdmResponse = this.testReportObject.testReport[testId].responseData;\r\n      if(this.mdmInitiated === true) {\r\n       console.log(\"MDM request is currently going on .....\");\r\n      }\r\n      else {\r\n        let self = this;\r\n        console.log(\"Initiating request to Device >>>> \" + testId);\r\n        this.requests.push(testId);\r\n        this.mdmInitiated = true;\r\n        this.stopStreaming(testId);\r\n        this.mdsService.request(JSON.parse(request)).subscribe(\r\n                response => {\r\n                  this.validateMDSResponse(runId, testId, request, response);\r\n                  //this.loading = false;\r\n                },\r\n                error => {\r\n                      this.validateMDSResponse(runId, testId, request, error);\r\n                      //this.loading = false;\r\n                 }\r\n              );\r\n              console.log(\"Finished capturing MDS Responses >>>>> \" + testId);\r\n              this.mdmInitiated = false;\r\n        }\r\n    }\r\n\r\n    validateMDSResponse(runId, testId, request, response) {\r\n          this.dataService.validateResponse(runId, testId, request, response).subscribe(\r\n                      result => {\r\n                        this.testReportObject = result;\r\n                        this.loading = false;\r\n                        //console.log('result:' + result);\r\n                      },\r\n                      error => { this.openDialog(\"Alert\", error);\r\n                              this.loading = false;\r\n                        }\r\n                    );\r\n    }\r\n\r\n    getStreamImgTagId(testId) {\r\n      let id = testId.split(' ').join('-');\r\n      return id;\r\n    }\r\n\r\n    /* startStreaming(testId) {\r\n       let element = document.getElementById(this.getStreamImgTagId(testId));\r\n       if(element) {\r\n         (<HTMLImageElement>element).setAttribute(\"src\", this.getStreamUrl(testId));\r\n       }\r\n    }\r\n\r\n    stopStreaming(testId) {\r\n      let element = document.getElementById(this.getStreamImgTagId(testId));\r\n      if(element) {\r\n        (<HTMLImageElement>element).setAttribute(\"src\", \"\");\r\n      }\r\n    } */\r\n\r\n    /* startStreaming(testId) {\r\n       console.log(\"startStreaming invoked.... >>> \" + testId);\r\n        var self = this;\r\n        var element = document.getElementById(\"test-id\");\r\n        if(element) {\r\n          var mediaSource = new MediaSource();\r\n          var url = URL.createObjectURL(myMediaSource);\r\n          mediaSource.addEventListener('sourceopen', this.sourceOpen);\r\n\r\n          self.mdsService.startMDSStream('http://127.0.0.1:4501/stream?deviceId=1&devideSubId=1');\r\n\r\n          console.log(\"after startMDSStream>>>>>>>>>>.\");\r\n\r\n          myMediaSource.addEventListener('sourceopen', function () {\r\n                console.log(myMediaSource.readyState);\r\n                var sourceBuffer = myMediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.64001e\"');\r\n                console.log(myMediaSource.readyState);\r\n\r\n                self.mdsService.messages.subscribe(msg => {\r\n                      console.log(\"i got a message\");\r\n                      sourceBuffer.appendBuffer(msg);\r\n                    });\r\n           });\r\n        }\r\n    }\r\n\r\n    sourceOpen() {\r\n        console.log(\"source open received\");\r\n        var mediaSource = this;\r\n        var sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\r\n    }\r\n\r\n\r\n    uint8ToBase64(buffer) {\r\n         var binary = '';\r\n         var len = buffer.byteLength;\r\n         for (var i = 0; i < len; i++) {\r\n             binary += String.fromCharCode(buffer[i]);\r\n         }\r\n         var result = window.btoa( binary );\r\n         console.log(\"window.btoa result >>>>>>>>>>>>>>>>>>\");\r\n         return result;\r\n    }\r\n\r\n    stopStreaming(testId) {\r\n      this.mdsStream = \"\";\r\n      let element = document.getElementById(this.getStreamImgTagId(testId));\r\n      if(element) {\r\n        (<HTMLVideoElement>element).setAttribute(\"src\", \"\");\r\n      }\r\n    } */\r\n\r\n\r\n  getStreamUrl(testId) {\r\n    return this.testReportObject.testReport[testId].streamUrl;\r\n  }\r\n\r\n  isStreamRequired(testId) {\r\n     return this.testReportObject.testReport[testId].streamUrl ? true : false;\r\n  }\r\n\r\n  /* isMDSResponseCaptured(testId) {\r\n      let mdmCaptured = false;\r\n      for(let i=0; i<this.requests.length;i++) {\r\n        if(this.requests[i] === testId) {\r\n          mdmCaptured = true;\r\n        }\r\n      }\r\n      return mdmCaptured;\r\n  } */\r\n\r\n  /* getMDSResponse(request, runId, testId) {\r\n      this.mdsService.request(request.requestInfoDto).subscribe(\r\n          response => {\r\n            console.log(response);\r\n            this.dataService.validateResponse(runId, testId, request, response).subscribe(\r\n              result => {console.log('result:' + result);\r\n                         this.fetchReport();\r\n              },\r\n              error => window.alert(error)\r\n            );\r\n          },\r\n        error => window.alert(error)\r\n      );\r\n    } */\r\n\r\n  /* requestMds(request, runId, testId) {\r\n    this.mdsService.request(request.requestInfoDto).subscribe(\r\n        response => {\r\n          console.log(response);\r\n          this.dataService.validateResponse(runId, testId, request, response).subscribe(\r\n            result => {console.log('result:' + result);\r\n                       this.fetchReport();\r\n            },\r\n            error => window.alert(error)\r\n          );\r\n        },\r\n      error => window.alert(error)\r\n    );\r\n  } */\r\n\r\n  getButtonName(request) {\r\n     let method = JSON.parse(request).verb;\r\n     switch(method.toUpperCase()) {\r\n      case \"MOSIPDISC\":\r\n        return \"Discover Devices\";\r\n      case \"MOSIPDINFO\":\r\n        return \"Get Device Info\";\r\n      case \"CAPTURE\":\r\n        return \"Initiate Capture\";\r\n      case \"RCAPTURE\":\r\n        return \"Initiate RCapture\";\r\n     }\r\n     return \"Initiate Request\";\r\n  }\r\n\r\n  OnPortSelect(value: any) {\r\n    this.currentPort = value;\r\n    this.devices = this.localStorageService.getDevicesByPortNumber(value);\r\n  }\r\n\r\n  getPassedValidators(value: any) {\r\n    if(value !== undefined) {\r\n      let total = 0;\r\n      for (let i = 0; i<value.length; i++) {\r\n        if(value[i].status == 'Passed')\r\n          total = total + 1;\r\n      }\r\n      return total + ' out of ' + value.length + ' validations Passed';\r\n    }\r\n    return '0 out of 0 Passed';\r\n  }\r\n\r\n    getSanitizedSafeURLResource(data) {\r\n      return this._sanitizer.bypassSecurityTrustHtml(data);\r\n    }\r\n\r\n    startStreaming(testId) {\r\n      let url = this.getStreamUrl(testId);\r\n      var parts = url.split(\"?\");\r\n      var args = parts[1].split(\"&\");\r\n      start_streaming(parts[0], args[0].replace(\"deviceId=\", \"\"), args[1].replace(\"deviceSubId=\", \"\"),\r\n      this.getStreamImgTagId(testId))\r\n    }\r\n\r\n    stopStreaming(testId) {\r\n      stop_streaming();\r\n    }\r\n\r\n    isAuthRequestRequired(testId) {\r\n       return this.testReportObject.testReport[testId].enableAuthTest ? true : false;\r\n    }\r\n\r\n    startAuthTest(testId) {\r\n        this.authloading = true;\r\n        console.log(\"Starting auth test for >>> \" + testId);\r\n        this.dataService.authTestCall(this.testReportObject.testReport[testId].runId, testId).subscribe(\r\n                result => {\r\n                     //window.alert(JSON.stringify(result))\r\n                     this.openDialog(\"Auth Response\", JSON.stringify(result))\r\n                     this.authloading = false\r\n                },\r\n                error => this.openDialog(\"Auth Error Response\", error)\r\n              );\r\n\r\n    }\r\n\r\n    openDialog(title: string, message: string): void {\r\n              this.dialog.open(ModalComponent, {\r\n                width: '40%',\r\n                data: {'title': title, 'message' : message }\r\n              });\r\n          }\r\n}\r\n","<div *ngIf=\"!testReportObject || Object.keys(testReportObject.testReport).length === 0\" style=\"padding: 1%;\">\r\n  <app-discover-devices></app-discover-devices>\r\n\r\n  <br/>\r\n\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Available Ports</mat-label>\r\n    <mat-select (selectionChange)='OnPortSelect($event.value)'>\r\n      <mat-option *ngFor=\"let port of availablePorts\" [value]=\"port\">\r\n        {{port}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Device</mat-label>\r\n    <mat-select [(ngModel)]=\"selectedDevice\">\r\n      <mat-option *ngFor=\"let obj of devices;\" [value]=\"obj\">{{obj.purpose + obj.deviceId}}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <button mat-raised-button\r\n          (click)=\"onRunClicked()\">\r\n    RUN\r\n  </button>\r\n</div>\r\n<br/>\r\n\r\n\r\n<!--Form Ends-->\r\n<div style=\"padding: 1%;\">\r\n<mat-accordion *ngIf=\"testReportObject\">\r\n  <mat-expansion-panel *ngFor=\"let key of objectKeys(testReportObject.testReport)\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        {{key}}\r\n      </mat-panel-title>\r\n      <mat-panel-description>\r\n        {{testReportObject.testReport[key].currentState}}\r\n       <!-- {{ getPassedValidators(testReportObject.testReport[key].validationResults) }}-->\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-tab-group dynamicHeight>\r\n      <mat-tab label=\"Description\">\r\n        <p *ngIf=\"testReportObject.testReport[key].summary\">\r\n         <b>Summary</b> : {{testReportObject.testReport[key].summary}}\r\n        </p>\r\n        <br/>\r\n        <p><b>ExecutedOn</b> : {{testReportObject.testReport[key].executedOn | date: 'full'}}</p>\r\n      </mat-tab>\r\n\r\n      <mat-tab label=\"Request\">\r\n\r\n          <div class=\"centereddiv\" *ngIf=\"isStreamRequired(key)\">\r\n            <!--<img #stream [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" alt=\"stream video feed\"\r\n                 style=\"background-color: #000000;\" border=\"1\">-->\r\n            <!--<mat-video [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" ></mat-video>-->\r\n            <!--<img #stream [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" alt=\"stream video feed\"\r\n                 style=\"background-color: #000000;\" border=\"1\" >-->\r\n            <!--<video #stream id=\"test-id\" width=\"200\" height=\"200\" ></video>-->\r\n           <!-- <img [id]=\"getStreamImgTagId(key)\" [src]=\"imageToShow\"\r\n                 alt=\"STREAMING ...\"\r\n                 *ngIf=\"!isImageLoading; else noImageFound\">\r\n            <ng-template #noImageFound>\r\n              <img src=\"fallbackImage.png\" alt=\"Fallbackimage\">\r\n            </ng-template>-->\r\n            <img #stream [id]=\"getStreamImgTagId(key)\" width=\"200\" height=\"200\" alt=\"Start Streaming to Display\" border=\"1\">\r\n          </div>\r\n\r\n          <div class=\"centereddiv\" >\r\n\r\n            <button *ngIf=\"isStreamRequired(key)\" mat-raised-button (click)=\"startStreaming(key)\">Start Streaming</button>\r\n\r\n            <button mat-raised-button (click)=\"getMDSResponse(testReportObject.testReport[key].requestData,\r\n            testReportObject.testReport[key].runId, key)\" [class.spinner]=\"loading\" [disabled]=\"loading\">\r\n              {{getButtonName(testReportObject.testReport[key].requestData)}}</button>\r\n\r\n            <button *ngIf=\"isAuthRequestRequired(key)\" mat-raised-button (click)=\"startAuthTest(key)\"\r\n                    [class.spinner]=\"authloading\" [disabled]=\"authloading\">Test Authentication</button>\r\n\r\n          </div>\r\n\r\n        <pre>{{JSON.parse(testReportObject.testReport[key].requestData) | json}}</pre>\r\n\r\n      </mat-tab>\r\n      <mat-tab label=\"Response\">\r\n           <pre>{{JSON.parse(testReportObject.testReport[key].responseData) | json}}</pre>\r\n      </mat-tab>\r\n      <mat-tab label=\"Validation Result\">\r\n        <mat-accordion>\r\n          <mat-expansion-panel *ngFor=\"let result of testReportObject.testReport[key].validationResults\">\r\n            <mat-expansion-panel-header>\r\n              <mat-panel-title>\r\n                <span *ngIf=\"result.status == 'Passed'\" class=\"material-icons\" style=\"margin-right: 24px;color: green;\">done</span>\r\n                <span *ngIf=\"result.status == 'Failed' || result.status == 'InternalException'\" class=\"material-icons\" style=\"margin-right: 24px;color: red;\">highlight_off</span>\r\n                <span *ngIf=\"result.status == 'Pending'\" class=\"material-icons\" style=\"margin-right: 24px;color: yellow;\">hourglass_full</span>\r\n                {{result.validationName}}\r\n              </mat-panel-title>\r\n              <mat-panel-description>\r\n                {{result.validationDescription}}\r\n              </mat-panel-description>\r\n            </mat-expansion-panel-header>\r\n            <pre *ngIf=\"result.validationTestResultDtos\">{{ result.validationTestResultDtos | json}}</pre>\r\n          </mat-expansion-panel>\r\n        </mat-accordion>\r\n      </mat-tab>\r\n      <mat-tab label=\"Result\">\r\n        <div [innerHTML]=\"getSanitizedSafeURLResource(testReportObject.testReport[key].renderContent)\"></div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n</div>\r\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {DataService} from '../../services/data/data.service';\r\nimport {MdsService} from '../../services/mds/mds.service';\r\n\r\n@Component({\r\n  selector: 'app-test-runs',\r\n  templateUrl: './test-runs.component.html',\r\n  styleUrls: ['./test-runs.component.css']\r\n})\r\nexport class TestRunsComponent implements OnInit {\r\n  displayedColumns: string[] = ['runId', 'runName', 'runStatus', 'createdOn'];\r\n  dataSource: any;\r\n\r\n  @ViewChild(MatPaginator, {static: false}) paginator:MatPaginator;\r\n  \r\n  @ViewChild(MatSort, {static: false}) sort: MatSort;\r\n  \r\n  constructor(private dataService: DataService) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  applyFilter(value: string) {\r\n    this.dataSource.filter = value.trim().toLocaleLowerCase();\r\n  }\r\n\r\n  getRuns(email: string) {\r\n    this.dataService.getRuns(email).subscribe(\r\n      response => {\r\n        this.dataSource = new MatTableDataSource();\r\n        this.dataSource.data = response;\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n        localStorage.setItem('runs', JSON.stringify(response));\r\n      },\r\n      error => window.alert(error)\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <mat-label>E-mail</mat-label>\r\n    <input #email matInput placeholder=\"abc@example.com\">\r\n  </mat-form-field>\r\n\r\n  <button mat-raised-button (click)=\"getRuns(email.value)\">Get Runs</button>\r\n</form>\r\n\r\n<!--Table Starts-->\r\n<div class=\"table\">\r\n  <mat-form-field >\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event.target.value)\">\r\n  </mat-form-field>\r\n\r\n  <div class=\"mat-elevation-z8\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort>\r\n\r\n      <!-- ID Column -->\r\n      <ng-container matColumnDef=\"runId\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Run ID </th>\r\n        <td mat-cell *matCellDef=\"let row\"> <a [routerLink]=\"['/run']\" [state]=\"{data: row}\">{{row.runId}}</a> </td>\r\n      </ng-container>\r\n      <!-- Progress Column -->\r\n      <ng-container matColumnDef=\"runName\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Run Name </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.runName}} </td>\r\n      </ng-container>\r\n\r\n      <!-- Progress Column -->\r\n      <ng-container matColumnDef=\"runStatus\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Run Status </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.runStatus}} </td>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"createdOn\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Created On </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.createdOn | date: 'full'}} </td><!--use 'long' to remove day-->\r\n      </ng-container>\r\n\r\n      <!-- Color Column -->\r\n      <!--    <ng-container matColumnDef=\"color\">-->\r\n      <!--      <th mat-header-cell *matHeaderCellDef mat-sort-header> Color </th>-->\r\n      <!--      <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\"> {{row.color}} </td>-->\r\n      <!--    </ng-container>-->\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n      </tr>\r\n    </table>\r\n\r\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" ></mat-paginator>\r\n  </div>\r\n</div>\r\n","export class ComposeRequest {\r\n  runId: string;\r\n  testId: string;\r\n  deviceInfo: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport { MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatOptionModule} from '@angular/material/core';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport { MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatProgressBarModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatCheckboxModule,\r\n    DragDropModule,\r\n    MatSlideToggleModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatSidenavModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule,\r\n    MatTabsModule,\r\n    MatExpansionModule,\r\n    MatStepperModule\r\n  ],\r\n  exports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatProgressBarModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatCheckboxModule,\r\n    DragDropModule,\r\n    MatSlideToggleModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatSidenavModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule,\r\n    MatTabsModule,\r\n    MatExpansionModule,\r\n    MatStepperModule,\r\n\r\n    FormsModule,\r\n    MatDialogModule\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\n\r\nimport { MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\r\n\r\ninterface DialogData {\r\n  title: String;\r\n  message: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.css']\r\n})\r\nexport class ModalComponent implements OnInit {\r\n\r\n  constructor(public dialogRef: MatDialogRef<ModalComponent>,\r\n      @Inject(MAT_DIALOG_DATA) public data: DialogData) {}\r\n\r\n    onNoClick(): void {\r\n      this.dialogRef.close();\r\n    }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h2 mat-dialog-title>{{data.title}}</h2>\r\n<mat-dialog-content>{{data.message}}</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close  >Close</button>\r\n</mat-dialog-actions>\r\n","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ModalComponent } from '../../modal/modal.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  constructor(private httpClient: HttpClient, private dialog: MatDialog) { }\r\n\r\n  getMasterData() {\r\n    return this.httpClient.get(environment.base_url + 'testmanager/masterdata')\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  getTestReport(runId) {\r\n    return this.httpClient.get(environment.base_url + 'testmanager/report/' +runId+ '/json')\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  getTests(requestBody) {\r\n    return this.httpClient.post(environment.base_url + 'testmanager/test', requestBody)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createRun(requestBody) {\r\n    return this.httpClient.post(environment.base_url + 'testmanager/createrun', requestBody)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getRuns(email) {\r\n    return this.httpClient.get(environment.base_url + 'testmanager/runs/' + email)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  decodeDeviceInfo(deviceInfoResponse: any) {\r\n    return this.httpClient.post(environment.base_url + 'testrunner/decodedeviceinfo', deviceInfoResponse)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n\r\n      console.error('An error occurred >>> ', JSON.stringify(error));\r\n\r\n      if(error.status === 0 || error.status === 404) {\r\n          return throwError('Not Connected to Server');\r\n      }\r\n\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(error.error.message);\r\n  }\r\n\r\n  composeRequest(runId: string, test: string, deviceDto: { port: any; deviceInfo: any }) {\r\n    return this.httpClient.post(environment.base_url + 'testrunner/composerequest', {\r\n      runId,\r\n      testId: test,\r\n      uiInputs: [],\r\n      deviceInfo: deviceDto\r\n\r\n    })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  composeAllRequests(runId: string, deviceDto: { port: any; deviceInfo: any }) {\r\n      return this.httpClient.post(environment.base_url + 'testrunner/getallrequests', {\r\n        runId,\r\n        deviceInfo: deviceDto\r\n      })\r\n        .pipe(\r\n          catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n  validateResponse(runId: any, testId: string, request: any, response: any) {\r\n    return this.httpClient.post(environment.base_url + 'testrunner/validateresponse', {\r\n      runId,\r\n      testId,\r\n      mdsResponse: JSON.stringify(response),\r\n      mdsRequest: JSON.stringify(request),\r\n      resultVerbosity: ''\r\n\r\n    })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  authTestCall(runId: any, testId: string) {\r\n      return this.httpClient.post(environment.base_url + 'testrunner/validateauthrequest', {\r\n        runId,\r\n        testId\r\n      })\r\n        .pipe(\r\n          catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    openDialog(title: string, message: string): void {\r\n              this.dialog.open(ModalComponent, {\r\n                width: '40%',\r\n                data: {'title': title, 'message' : message }\r\n              });\r\n          }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() { }\r\n\r\n  addDeviceInfos(port: string, decodedDeviceInfo: any) {\r\n      console.log(decodedDeviceInfo);\r\n      // const devices = {\r\n      //   port: port,\r\n      //   devices: decodedDeviceInfo\r\n      // };\r\n      // const devices = {};\r\n      // devices[port] = decodedDeviceInfo;\r\n      let deviceInfo = {};\r\n      if (!localStorage.getItem('deviceInfo')) {\r\n        localStorage.setItem('deviceInfo', JSON.stringify(deviceInfo));\r\n      }\r\n      deviceInfo = JSON.parse(localStorage.getItem('deviceInfo'));\r\n      deviceInfo[port] = decodedDeviceInfo;\r\n      localStorage.setItem('deviceInfo', JSON.stringify(deviceInfo));\r\n  }\r\n\r\n  addDeviceDiscover(port: string, deviceDiscover: any) {\r\n    console.log(deviceDiscover);\r\n    // const devices = {\r\n    //   port: port,\r\n    //   devices: decodedDeviceInfo\r\n    // };\r\n    // const devices = {};\r\n    // devices[port] = decodedDeviceInfo;\r\n    let discover = {};\r\n    //if (!localStorage.getItem('discover')) {\r\n      localStorage.setItem('discover', JSON.stringify(discover));\r\n    //}\r\n    discover = JSON.parse(localStorage.getItem('discover'));\r\n    discover[port] = deviceDiscover;\r\n    localStorage.setItem('discover', JSON.stringify(discover));\r\n  }\r\n  // using device info\r\n  // getAvailablePorts() {\r\n  //   if (!localStorage.getItem('deviceInfo')) {\r\n  //     return [];\r\n  //   }\r\n  //   const ports = Object.keys(JSON.parse(localStorage.getItem('deviceInfo')));\r\n  //   // console.log(ports);\r\n  //   return ports;\r\n  // }\r\n\r\n  getAvailablePorts() {\r\n    if (!localStorage.getItem('discover')) {\r\n      return [];\r\n    }\r\n    const ports = Object.keys(JSON.parse(localStorage.getItem('discover')));\r\n    // console.log(ports);\r\n    return ports;\r\n  }\r\n// using device info\r\n  // getDevicesByPortNumber(port: string) {\r\n  //   if (!localStorage.getItem('deviceInfo')) {\r\n  //     return [];\r\n  //   }\r\n  //   return JSON.parse(localStorage.getItem('deviceInfo'))[port];\r\n  // }\r\n\r\n\r\n  getDevicesByPortNumber(port: string) {\r\n    if (!localStorage.getItem('discover')) {\r\n      return [];\r\n    }\r\n    return JSON.parse(localStorage.getItem('discover'))[port];\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Observable, of, throwError, Subject} from 'rxjs';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {environment} from '../../../environments/environment';\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {DataService} from '../data/data.service';\r\nimport {LocalStorageService} from '../local-storage/local-storage.service';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ModalComponent } from '../../modal/modal.component';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MdsService {\r\n\r\n  private mdsHost: string\r\n  private mdsUrl: string;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private dataService: DataService,\r\n    private localStorageService: LocalStorageService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  discover(host:string, port: string) {\r\n    this.mdsHost = host;\r\n    this.mdsUrl = this.mdsHost + ':' + port + '/device';\r\n    return this.httpClient.request('MOSIPDISC', this.mdsUrl, {\r\n      body: {\r\n        type: 'Biometric Device'\r\n      }\r\n    }).pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getInfo(host:string, port: string) {\r\n    this.mdsUrl = this.mdsHost + ':' + port + '/info';\r\n    return this.httpClient.request('MOSIPDINFO', this.mdsUrl)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      // console.error(\r\n      //   `Backend returned code ${error.status}, ` +\r\n      //   `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(\r\n      'Something bad happened; please try again later.');\r\n  }\r\n\r\n  scanWithInfo() {\r\n    // const ports = [];\r\n    return new Observable(\r\n      subscriber => {\r\n        for (let i = 4501; i <= 4600; i++) {\r\n          this.getInfo(this.mdsHost, i.toString()).subscribe(\r\n            value => {\r\n              this.dataService.decodeDeviceInfo(value).subscribe(\r\n                decodedDeviceInfo => this.localStorageService.addDeviceInfos(i.toString(), decodedDeviceInfo),\r\n                error => console.log(\"Failed to get decoded device info\")\r\n              );\r\n            }\r\n          );\r\n        }\r\n        subscriber.complete();\r\n        return {unsubscribe() {}};\r\n      }\r\n    );\r\n  }\r\n\r\n  scan(host:string) {\r\n    // const ports = [];\r\n    return new Observable(\r\n      subscriber => {\r\n        for (let i = 4501; i <= 4600; i++) {\r\n          // if (i == 4501) {\r\n            this.discover(host, i.toString()).subscribe(\r\n              value => {\r\n                console.log('run' + value);\r\n                this.localStorageService.addDeviceDiscover(i.toString(), value);\r\n              }\r\n            );\r\n          // }\r\n        }\r\n        subscriber.complete();\r\n        return {unsubscribe() {}};\r\n      }\r\n    );\r\n  }\r\n\r\n  request(requestInfoDto: any) {\r\n    return this.httpClient.request(requestInfoDto.verb, requestInfoDto.url, {body: requestInfoDto.body});\r\n  }\r\n\r\n  openDialog(title: string, message: string): void {\r\n                this.dialog.open(ModalComponent, {\r\n                  width: '40%',\r\n                  data: {'title': title, 'message' : message }\r\n                });\r\n            }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  base_url: 'http://localhost:8080/',\r\n  mds_url: 'http://127.0.0.1:'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}